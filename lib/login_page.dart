import 'package:flutter/material.dart';
import 'package:k_photo/services/supabase_service.dart';
import 'package:k_photo/main.dart' as main;
import 'package:k_photo/data_storage_service.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:k_photo/services/user_sync_service.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({Key? key}) : super(key: key);

  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final SupabaseService _supabaseService = SupabaseService();
  final DataStorageService _dataStorageService = DataStorageService();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  bool _isLoading = false;
  bool _isLoginMode = true;

  void _navigateToHomePage() {
    // Obter usu√°rio atual
    final user = Supabase.instance.client.auth.currentUser;
    
    if (user != null) {
      print('üîê Navegando para HomePage com usu√°rio autenticado:');
      print('üÜî ID do usu√°rio: ${user.id}');
      print('üìß Email do usu√°rio: ${user.email ?? "Sem email"}');
      print('üìÖ Usu√°rio criado em: ${user.createdAt}');

      // Verificar sess√£o atual
      final session = Supabase.instance.client.auth.currentSession;
      if (session != null) {
        print('üîë Detalhes da sess√£o:');
        print('   Token de acesso: ${session.accessToken.substring(0, 10)}...');
        print('   Expira em: ${session.expiresAt}');
      }

      // Definir usu√°rio no servi√ßo de armazenamento
      _dataStorageService.setCurrentUser(user.id);

      // Verificar se o usu√°rio foi definido corretamente
      if (_dataStorageService.isUserDefined()) {
        print('‚úÖ Usu√°rio definido com sucesso no DataStorageService');
        
        // Navegar para HomePage
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(
            builder: (context) => main.HomePage(
              dataStorageService: _dataStorageService,
            )
          )
        );
      } else {
        print('‚ùå Falha ao definir usu√°rio no DataStorageService');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erro: N√£o foi poss√≠vel definir o usu√°rio'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } else {
      print('‚ùå Tentativa de navega√ß√£o sem usu√°rio definido');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Erro: Usu√°rio n√£o autenticado'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  // M√©todo para garantir cria√ß√£o de binder
  Future<void> _ensureInitialBinder(DataStorageService dataStorageService) async {
    try {
      final binders = await dataStorageService.getAllBinders();
      print('üîç Binders existentes durante login: ${binders.length}');
      
      // S√≥ criar binder inicial se N√ÉO houver NENHUM binder
      if (binders.isEmpty) {
        print('üÜï Nenhum binder encontrado. Criando binder inicial no login.');
        await dataStorageService.addNewBinder();
      } else {
        print('‚úÖ Binders j√° existem. N√£o ser√° criado binder inicial.');
      }
    } catch (e) {
      print('‚ùå Erro ao verificar/criar binder inicial no login: $e');
    }
  }

  Future<void> _signInWithGoogle() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final response = await _supabaseService.signInWithGoogle();
      
      if (response.user != null) {
        _dataStorageService.setCurrentUser(response.user!.id);

        // Garantir binder inicial
        await _ensureInitialBinder(_dataStorageService);

        final userSyncService = UserSyncService(
          Supabase.instance.client, 
          _dataStorageService
        );
        
        userSyncService.setCurrentUser(response.user!.id);
        await userSyncService.syncAllUserData();

        _navigateToHomePage();
      } else {
        throw Exception('Usu√°rio n√£o autenticado');
      }
    } catch (e) {
      debugPrint('Erro detalhado no login com Google: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Erro no login: ${e.toString()}'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _signIn() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final email = _emailController.text.trim();
      final password = _passwordController.text.trim();

      if (email.isEmpty || password.isEmpty) {
        throw Exception('Email e senha s√£o obrigat√≥rios');
      }

      final response = await _supabaseService.signIn(
        email: email, 
        password: password
      );

      if (response.user != null) {
        _dataStorageService.setCurrentUser(response.user!.id);

        // Garantir binder inicial
        await _ensureInitialBinder(_dataStorageService);

        final userSyncService = UserSyncService(
          Supabase.instance.client, 
          _dataStorageService
        );
        
        userSyncService.setCurrentUser(response.user!.id);
        await userSyncService.syncAllUserData();

        _navigateToHomePage();
      } else {
        throw Exception('Usu√°rio n√£o autenticado');
      }
    } catch (e) {
      String errorMessage = 'Erro no login';
      
      print('Erro no login: $e');
      
      if (e is AuthException) {
        switch (e.message) {
          case 'Email not confirmed':
            // Ignorar erro de email n√£o confirmado
            try {
              final response = await _supabaseService.signIn(
                email: _emailController.text.trim(), 
                password: _passwordController.text.trim()
              );
              return; // Sair do m√©todo se o login for bem-sucedido
            } catch (loginError) {
              print('Erro no login ap√≥s ignorar confirma√ß√£o: $loginError');
              errorMessage = 'Erro ao fazer login';
            }
            break;
          case 'email rate limit exceeded':
            errorMessage = 'Muitas tentativas de login. Tente novamente mais tarde.';
            break;
          default:
            errorMessage = e.message ?? 'Erro de autentica√ß√£o';
        }
      }
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(errorMessage),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _signUp() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final email = _emailController.text.trim();
      final password = _passwordController.text.trim();

      // Valida√ß√µes adicionais
      if (email.isEmpty || !email.contains('@')) {
        throw Exception('Email inv√°lido');
      }

      if (password.length < 6) {
        throw Exception('Senha deve ter no m√≠nimo 6 caracteres');
      }

      print('Tentando registrar usu√°rio: $email');
      print('Verificando status do email antes do registro');

      final response = await _supabaseService.signUp(
        email: email,
        password: password,
      );

      if (response.user != null) {
        _dataStorageService.setCurrentUser(response.user!.id);

        // Garantir binder inicial
        await _ensureInitialBinder(_dataStorageService);

        // Inicializar servi√ßo de sincroniza√ß√£o
        final userSyncService = UserSyncService(
          Supabase.instance.client, 
          _dataStorageService
        );
        
        userSyncService.setCurrentUser(response.user!.id);
        await userSyncService.syncAllUserData();

        _navigateToHomePage();
      } else {
        throw Exception('Usu√°rio n√£o autenticado');
      }
    } catch (e) {
      print('Erro no registro: $e');
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(e.toString()),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  void initState() {
    super.initState();
    _checkCurrentSession();
  }

  Future<void> _checkCurrentSession() async {
    try {
      // Tentar restaurar sess√£o
      final supabaseService = SupabaseService(Supabase.instance.client);
      final sessionRestored = await supabaseService.restoreSession();

      if (sessionRestored) {
        // Se sess√£o restaurada com sucesso, navegar para HomePage
        _navigateToHomePage();
        return;
      }

      // Verifica√ß√£o padr√£o de sess√£o
      final session = Supabase.instance.client.auth.currentSession;
      final user = Supabase.instance.client.auth.currentUser;

      print('Verifica√ß√£o de Sess√£o no Login Page:');
      print('Sess√£o existe: ${session != null}');
      print('Usu√°rio existe: ${user != null}');
      
      if (session != null && user != null) {
        print('Sess√£o Atual:');
        print('ID do Usu√°rio: ${user.id}');
        print('Email do Usu√°rio: ${user.email}');
        print('Token de Acesso: ${session.accessToken.substring(0, 10)}...');
        
        // Verificar se a sess√£o n√£o est√° expirada
        if (!session.isExpired) {
          // Navegar automaticamente para HomePage se sess√£o v√°lida
          _navigateToHomePage();
        } else {
          print('Sess√£o expirada, necess√°rio novo login');
        }
      }
    } catch (e) {
      print('Erro na verifica√ß√£o de sess√£o: $e');
      // Opcional: mostrar mensagem de erro ao usu√°rio
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Erro ao verificar sess√£o: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Text(
                'K-PHOTO',
                style: TextStyle(
                  fontSize: 36,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 32),
              
              // Email TextField
              TextField(
                controller: _emailController,
                decoration: InputDecoration(
                  labelText: 'Email',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
                keyboardType: TextInputType.emailAddress,
              ),
              const SizedBox(height: 16),
              
              // Password TextField
              TextField(
                controller: _passwordController,
                decoration: InputDecoration(
                  labelText: 'Senha',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
                obscureText: true,
              ),
              const SizedBox(height: 24),
              
              // Login/Signup Buttons
              _isLoading 
                ? const CircularProgressIndicator()
                : Column(
                    children: [
                      ElevatedButton(
                        onPressed: _isLoginMode ? _signIn : _signUp,
                        style: ElevatedButton.styleFrom(
                          minimumSize: const Size(double.infinity, 50),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        child: Text(_isLoginMode ? 'Entrar' : 'Cadastrar'),
                      ),
                      const SizedBox(height: 16),
                      TextButton(
                        onPressed: () {
                          setState(() {
                            _isLoginMode = !_isLoginMode;
                          });
                        },
                        child: Text(
                          _isLoginMode 
                            ? 'N√£o tem conta? Cadastre-se' 
                            : 'J√° tem conta? Fa√ßa login'
                        ),
                      ),
                    ],
                  ),
              
              const SizedBox(height: 24),
              
              // Google Sign In Button
              _isLoading 
                ? const SizedBox.shrink()
                : OutlinedButton.icon(
                    icon: Image.asset(
                      'assets/google_logo.png', 
                      height: 24, 
                      width: 24
                    ),
                    label: const Text('Entrar com Google'),
                    onPressed: _signInWithGoogle,
                    style: OutlinedButton.styleFrom(
                      minimumSize: const Size(double.infinity, 50),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                  ),
            ],
          ),
        ),
      ),
    );
  }
}
